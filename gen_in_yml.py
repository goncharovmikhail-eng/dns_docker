import os
import ipaddress
import yaml
from jinja2 import Environment, FileSystemLoader
from collections import defaultdict

env = Environment(loader=FileSystemLoader('templates'))

ZONES_YAML_PATH = "zones/zones.yml"

def ask(msg, default=None):
    suffix = f" [{default}]" if default else ""
    val = input(f"{msg}{suffix}: ").strip()
    return val if val else default

def get_reverse_zone_name(ips: set[str]) -> str:
    if len(ips) == 1:
        return ipaddress.IPv4Address(list(ips)[0]).reverse_pointer
    else:
        net = ipaddress.IPv4Network(list(ips)[0] + '/24', strict=False)
        return '.'.join(reversed(str(net.network_address).split('.')[:3])) + '.in-addr.arpa'

def load_zones(path=ZONES_YAML_PATH):
    if os.path.exists(path):
        with open(path) as f:
            data = yaml.safe_load(f)
            if isinstance(data, dict):
                return data
            else:
                print("‚ö†Ô∏è zones.yml –±—ã–ª –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Å–ø–∏—Å–æ–∫). –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è.")
                return {}
    return {}

def save_zones(data, path=ZONES_YAML_PATH):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w') as f:
        yaml.safe_dump(data, f, sort_keys=False)

def main():
    print("üõ† –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä DNS-–∑–æ–Ω –≤ YAML (gen_in_yml.py)")
    zones_data = load_zones()

    zone_name = ask("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–æ–Ω—ã (example.com)")
    if zone_name in zones_data:
        print(f"‚ö†Ô∏è –ó–æ–Ω–∞ '{zone_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ zones.yml. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
        return

    default_ip = ask("–í–≤–µ–¥–∏—Ç–µ IP –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "192.168.1.1")
    records = []
    ptr_records = defaultdict(str)
    unique_ips = set()
    added_names = set()

    # –ü–æ—á—Ç–∞
    mail_enabled = ask("–ù—É–∂–Ω–∞ –ª–∏ –ø–æ—á—Ç–∞? (y/n)", "n").lower() == 'y'
    if mail_enabled:
        mail_sub = ask("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω –¥–ª—è –ø–æ—á—Ç—ã", "mail")
        dkim_key = ask("–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π DKIM-–∫–ª—é—á (–∏–ª–∏ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", "")

        if mail_sub not in added_names:
            records.append({'name': mail_sub, 'type': 'A', 'value': default_ip})
            added_names.add(mail_sub)

        records.extend([
            {'name': '@', 'type': 'MX', 'value': f"10 {mail_sub}.{zone_name}."},
            {'name': '@', 'type': 'TXT', 'value': '"v=spf1 +mx ~all"'},
            {'name': '_dmarc', 'type': 'TXT', 'value': f'"v=DMARC1;p=none;rua=mailto:dmarc@{zone_name}"'},
            {'name': 'dkim._domainkey', 'type': 'TXT', 'value': f'"v=DKIM1; k=rsa; p={dkim_key}"' if dkim_key else '"v=DKIM1; k=rsa; p="'}
        ])

        ptr_records[default_ip.split('.')[-1]] = f"{mail_sub}.{zone_name}."
        unique_ips.add(default_ip)

    # –ü–æ–¥–¥–æ–º–µ–Ω—ã
    print("\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ 'q' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.")
    while True:
        name = input("> –ü–æ–¥–¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, admin): ").strip()
        if name.lower() == "q":
            break

        if name in added_names:
            print(f"‚ö†Ô∏è –ü–æ–¥–¥–æ–º–µ–Ω '{name}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        while True:
            ip = ask(f"IP –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ '{name}'", default_ip)
            try:
                ipaddress.IPv4Address(ip)
                break
            except ipaddress.AddressValueError:
                print(f"‚ùå '{ip}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º IPv4-–∞–¥—Ä–µ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        records.append({'name': name, 'type': 'A', 'value': ip})
        added_names.add(name)
        unique_ips.add(ip)
        ptr_records[ip.split('.')[-1]] = f"{name}.{zone_name}."

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ A-–∑–∞–ø–∏—Å–∏
    for name in ('@', 'ns'):
        if name not in added_names:
            records.append({'name': name, 'type': 'A', 'value': default_ip})
            added_names.add(name)
    ptr_records[default_ip.split('.')[-1]] = f"ns.{zone_name}."
    unique_ips.add(default_ip)

    # –û–±—Ä–∞—Ç–Ω–∞—è –∑–æ–Ω–∞
    reverse_zone_name = get_reverse_zone_name(unique_ips)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zones.yml
    zones_data[zone_name] = {
        'default_ip': default_ip,
        'records': records,
        'reverse_zone': reverse_zone_name,
        'ptr': dict(ptr_records)
    }

    save_zones(zones_data)
    print(f"\n‚úÖ –ó–æ–Ω–∞ '{zone_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {ZONES_YAML_PATH}")

if __name__ == "__main__":
    main()
